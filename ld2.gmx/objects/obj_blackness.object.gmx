<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blackness soon
darkenedtiles = ds_stack_create();

nexttodarken = noone;
var tiletodarken = noone;
with (obj_tile) {
    if (tiletodarken == noone || y &gt; tiletodarken.y || (y == tiletodarken.y &amp;&amp; x &lt; tiletodarken.x))
        tiletodarken = id;
}
nexttodarken = tiletodarken;
alarm_time = 375;
goingdown = false;

darkenedany = false;

alarm[0] = 30;
undarkening = false;

occasion = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_destroy(darkenedtiles);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_stack_size(darkenedtiles) == 0) { //cleaned up by destroy
    instance_destroy();
    exit
}
else
    alarm[1] = 10;
    
with (ds_stack_pop(darkenedtiles)) {
    upgrading_perform(previousscript);
    fadeout = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn a tile dark
darkenedany = true;

var alarm_multiplier = 1 + tile_identifier_total("stopDarkness");

with (nexttodarken) {
    upgrading_perform(tile_black_create);
}

ds_stack_push(darkenedtiles, nexttodarken);

//Then find the next one
if (goingdown &amp;&amp; nexttodarken.tile_bottom &gt;= 0 &amp;&amp; !ds_map_exists(nexttodarken.tile_bottom.identifiers, "blackness")) {
    nexttodarken = nexttodarken.tile_bottom;
    alarm[0] = alarm_time * alarm_multiplier;
}
else if (nexttodarken.tile_right &gt;= 0 &amp;&amp; !ds_map_exists(nexttodarken.tile_right.identifiers, "blackness")) {
    nexttodarken = nexttodarken.tile_right;
    alarm[0] = alarm_time * alarm_multiplier;
    goingdown = false;
}
else if (nexttodarken.tile_top &gt;= 0 &amp;&amp; !ds_map_exists(nexttodarken.tile_top.identifiers, "blackness")) {
    nexttodarken = nexttodarken.tile_top;
    alarm[0] = alarm_time * alarm_multiplier;
}
else if (nexttodarken.tile_left &gt;= 0 &amp;&amp; !ds_map_exists(nexttodarken.tile_left.identifiers, "blackness")) {
    nexttodarken = nexttodarken.tile_left;
    alarm[0] = alarm_time * alarm_multiplier;
}
else if (nexttodarken.tile_bottom &gt;= 0 &amp;&amp; nexttodarken.tile_bottom.sprite_index != spr_blackness) {
    nexttodarken = nexttodarken.tile_bottom;
    alarm[0] = alarm_time * alarm_multiplier;
    goingdown = true;
}
else {
    //You lost!
    with (instance_create(0, room_height - 18 * 2 - 4 + 9, obj_bottominfo)) {
        text = "Oh no, darkness destroyed everything! Game Over!";
        occasion = 1;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset alarm if needed
if (obj_controller.game_paused)
    alarm[0] += 1;
else if (alarm[0] &gt; 0)
    alarm[0] = max(1, alarm[0] - obj_controller.game_speed + 1);
if (obj_controller.game_paused)
    alarm[1] += 1;
else if (alarm[1] &gt; 0)
    alarm[1] = max(1, alarm[1] - obj_controller.game_speed + 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pre-darken tiles
if (alarm[0] &gt;= 0) {
    var animationprogress = max(0, 1 - (alarm[0] / 20));
    if (animationprogress &gt; 0) {
        draw_set_colour(c_black);
        draw_set_alpha(animationprogress);
        draw_sprite(spr_blackness, 0, nexttodarken.x, nexttodarken.y);
        draw_set_alpha(1);
        /*draw_rectangle(nexttodarken.x, nexttodarken.y, nexttodarken.x + 17, nexttodarken.y + 9 * animationprogress, false);
        draw_rectangle(nexttodarken.x, nexttodarken.y + 17 - 9 * animationprogress, nexttodarken.x + 17, nexttodarken.y + 17, false);
        draw_rectangle(nexttodarken.x, nexttodarken.y, nexttodarken.x + 9 * animationprogress, nexttodarken.y + 17, false);
        draw_rectangle(nexttodarken.x + 17 - 9 * animationprogress, nexttodarken.y, nexttodarken.x + 17, nexttodarken.y + 17, false);*/
    }
    
    if (!darkenedany) {
        //draw_sprite(spr_tentaclesofdarkness, 0, nexttodarken.x, nexttodarken.y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
