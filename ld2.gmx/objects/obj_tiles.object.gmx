<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create terrain
upgradesDone = ds_map_create();
tiles = ds_grid_create(ceil(obj_ui.x / 18), ceil(room_height / 18));

var ww = ds_grid_width(tiles), hh = ds_grid_height(tiles); 

var tiletype = -1;

for (var xx = 0; xx &lt; ww; xx += 1)
for (var yy = 0; yy &lt; hh; yy += 1) {
    tiletype[xx, yy] = tile_grass_create;//choose(tile_forest_create, tile_forest_create, tile_grass_create, tile_grass_create, tile_grass_create, tile_water_create, tile_forest_create, tile_stone_create);
}

//sand tile
var xx, yy;
do {
    xx = irandom_range(ww / 2 - 1, ww / 2);
    yy = irandom_range(hh / 2 - 1, hh / 2);
}
until tiletype[xx, yy] == tile_grass_create
tiletype[xx, yy] = tile_standingstones_create;

//Force generate some patterns near the center before its too late - mushroom forest
var xx, yy, diry, dirx = choose(-1, 1);
do {
    xx = irandom_range(ww / 3, floor(ww / 3 * 2) - 1);
    yy = irandom_range(hh / 3, floor(hh / 3 * 2) - 1);
    diry = choose(-1, 1);
} until (tiletype[xx, yy] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy + diry] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy - diry] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy + diry * 2] == tile_grass_create &amp;&amp; tiletype[xx, yy + diry * 2] == tile_grass_create)
tiletype[xx, yy] = tile_mushroomforest_create;
tiletype[xx + dirx, yy] = -1;
tiletype[xx + dirx, yy + diry] = -1;
tiletype[xx + dirx, yy - diry] = -1;
tiletype[xx + dirx, yy + diry * 2] = -1;
tiletype[xx, yy + diry * 2] = -1;

//Force generate some patterns near the center before its too late - 5 forests
var xx, yy;
do {
    xx = irandom_range(ww / 3.5, ww - ww / 3.5 - 1);
    yy = irandom_range(hh / 3.5, hh - hh / 3.5 - 1);
} until (tiletype[xx, yy] == tile_grass_create &amp;&amp; tiletype[xx + 1, yy] == tile_grass_create &amp;&amp; tiletype[xx, yy + 1] == tile_grass_create &amp;&amp; tiletype[xx - 1, yy] == tile_grass_create &amp;&amp; tiletype[xx, yy - 1] == tile_grass_create)
tiletype[xx, yy] = tile_forest_create;
tiletype[xx + 1, yy] = tile_forest_create;
tiletype[xx, yy + 1] = tile_forest_create;
tiletype[xx - 1, yy] = tile_forest_create;
tiletype[xx, yy - 1] = tile_forest_create;

//Force generate some patterns near the center before its too late - stony thing
var xx, yy, dirx, diry;
do {
    xx = irandom_range(floor(ww / 3), floor(ww - ww / 3) - 1);
    yy = irandom_range(floor(hh / 3), floor(hh - hh / 3) - 1);
    dirx = choose(-1, 1);
    diry = choose(-1, 1);
} until (tiletype[xx, yy] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy + diry] == tile_grass_create &amp;&amp; tiletype[xx, yy + diry] == tile_grass_create &amp;&amp; tiletype[xx, yy + diry * 2] == tile_grass_create &amp;&amp; tiletype[xx + dirx, yy + diry * 2] == tile_grass_create)
tiletype[xx, yy] = tile_stone_create;
tiletype[xx + dirx, yy + diry] = tile_stone_create;
tiletype[xx , yy + diry] = -1;
tiletype[xx, yy + diry * 2] = -1;
tiletype[xx + dirx, yy + diry * 2] = -1;

/*//Force generate some patterns near the center before its too late - forest
var xx, yy;
do {
    xx = irandom_range(ww / 3, ww / 3 * 2);
    yy = irandom_range(hh / 3, hh / 3 * 2);
}
until tiletype[xx, yy] == tile_grass_create
tiletype[xx, yy] = tile_forest_level2_create;*/

//let's add some water
var waterPositionsX = ds_list_create(), waterPositionsY = ds_list_create();
//Fully random water
repeat (irandom_range(4, 5)) {
    var xx = irandom(ww - 1), yy = irandom(hh - 1);
    while (tiletype[xx, yy] != tile_grass_create) {
        xx = irandom(ww - 1);
        yy = irandom(hh - 1);
    }
    repeat (2) {
        ds_list_add(waterPositionsX, xx);
        ds_list_add(waterPositionsY, yy);
    }
    tiletype[xx, yy] = tile_water_create;
}

//Edgy water
repeat (irandom_range(3, 4)) {
    var xx = 0, yy = 0;
    do {
        if (irandom(1)) {
            xx = choose(0, ww - 1);
            yy = irandom(hh - 1);
        } else {
            xx = irandom(ww - 1);
            yy = choose(0, hh - 1);
        }
    } until tiletype[xx, yy] == tile_grass_create;
    repeat (2) {
        ds_list_add(waterPositionsX, xx);
        ds_list_add(waterPositionsY, yy);
    }
    tiletype[xx, yy] = tile_water_create;
}

//Now grow the water
repeat irandom_range(20, 25) {
    var xx = 0, yy = 0;
    do {
        var i = irandom(ds_list_size(waterPositionsX) - 1);
        xx = waterPositionsX[| i];
        yy = waterPositionsY[| i];
        if (irandom(1)) xx += choose(-1, 1) else yy += choose(-1, 1);
    } until xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; ww &amp;&amp; yy &lt; hh &amp;&amp; tiletype[xx, yy] == tile_grass_create;
    ds_list_add(waterPositionsX, xx);
    ds_list_add(waterPositionsY, yy);
    tiletype[xx, yy] = tile_water_create;
}

ds_list_destroy(waterPositionsX);
ds_list_destroy(waterPositionsY);

//Randoms to distribute
var distributeOther = ds_list_create();
repeat (irandom_range(38, 42))
    ds_list_add(distributeOther, tile_forest_create);
repeat (irandom_range(5, 8))
    ds_list_add(distributeOther, tile_stone_create);
repeat (3)
    ds_list_add(distributeOther, tile_mushroomforest_create);
ds_list_shuffle(distributeOther);
repeat (5)
    ds_list_add(distributeOther, tile_stone_create);

while (! ds_list_empty(distributeOther)) {
    var xx = 0, yy = 0;
    do {
        xx = irandom(ww - 1);
        yy = irandom(hh - 1);
    } until tiletype[xx, yy] == tile_grass_create;
    tiletype[xx, yy] = distributeOther[| ds_list_size(distributeOther) - 1];
    ds_list_delete(distributeOther, ds_list_size(distributeOther) - 1);
}
    
ds_list_destroy(distributeOther);

for (var xx = 0; xx &lt; ds_grid_width(tiles); xx += 1)
for (var yy = 0; yy &lt; ds_grid_height(tiles); yy += 1) {
    with (tile_create(xx * 18, yy * 18)) {
        other.tiles[# xx, yy] = id;
        tile_clear();
        var scr = tiletype[xx, yy];
        if (scr == -1) scr = tile_grass_create;
        var info = tile_get_info(scr);
        sprite_index = info[? "sprite"];
        image_index = info[? "image"];
        script_execute(scr);
        my_script = scr;
        if (production &gt;= 0) ds_map_destroy(production);
        production = tile_get_production(scr);
        ds_map_destroy(info);
    }
}

for (var xx = 0; xx &lt; ds_grid_width(tiles); xx += 1)
for (var yy = 0; yy &lt; ds_grid_height(tiles); yy += 1) {
    var tile = tiles[# xx, yy];
    tile.adjecent_tiles = ds_list_create();
    
    if (xx &gt; 0) {
        tile.tile_left = tiles[# xx - 1, yy];
        ds_list_add(tile.adjecent_tiles, tile.tile_left);
    }
    if (yy &gt; 0) {
        tile.tile_top = tiles[# xx, yy - 1];
        ds_list_add(tile.adjecent_tiles, tile.tile_top);
    }
    if (xx &lt; ds_grid_width(tiles) - 1) {
        tile.tile_right = tiles[# xx + 1, yy];
        ds_list_add(tile.adjecent_tiles, tile.tile_right);
    }
    if (yy &lt; ds_grid_height(tiles) - 1) {
        tile.tile_bottom = tiles[# xx, yy + 1];
        ds_list_add(tile.adjecent_tiles, tile.tile_bottom);
    }    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy tiles grid
ds_grid_destroy(tiles);
ds_map_destroy(upgradesDone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
